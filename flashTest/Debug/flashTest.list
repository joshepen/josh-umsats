
flashTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800325c  0800325c  0001325c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032b0  080032b0  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080032b0  080032b0  000132b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032b8  080032b8  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032b8  080032b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032bc  080032bc  000132bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080032c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000002c  080032ec  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  080032ec  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b985  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc4  00000000  00000000  0002b9e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002d7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002e188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000221d6  00000000  00000000  0002eab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c14f  00000000  00000000  00050c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf832  00000000  00000000  0005cdd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c607  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002728  00000000  00000000  0012c658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003244 	.word	0x08003244

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	08003244 	.word	0x08003244

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <Flash_Read>:
#include "stm32l4xx.h"
HAL_StatusTypeDef Flash_Read(uint32_t address,uint8_t *buf,size_t num_bytes){
 80004d8:	b480      	push	{r7}
 80004da:	b08b      	sub	sp, #44	; 0x2c
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 80004e4:	2300      	movs	r3, #0
 80004e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(!buf){
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d103      	bne.n	80004f8 <Flash_Read+0x20>
		status = HAL_ERROR;
 80004f0:	2301      	movs	r3, #1
 80004f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		goto error;
 80004f6:	e02b      	b.n	8000550 <Flash_Read+0x78>
	}
	int x;
	uint32_t * address_pointer = (uint32_t *)  address;
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	61bb      	str	r3, [r7, #24]
	for(size_t i=0;i<num_bytes;i++){
 80004fc:	2300      	movs	r3, #0
 80004fe:	623b      	str	r3, [r7, #32]
 8000500:	e021      	b.n	8000546 <Flash_Read+0x6e>
		uint32_t num = 0x0;
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
		for(size_t j=0;j<8;j+=2){
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]
 800050a:	e016      	b.n	800053a <Flash_Read+0x62>
			num=address_pointer[i*8+j]%0x100;
 800050c:	6a3b      	ldr	r3, [r7, #32]
 800050e:	00da      	lsls	r2, r3, #3
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	4413      	add	r3, r2
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	69ba      	ldr	r2, [r7, #24]
 8000518:	4413      	add	r3, r2
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	b2db      	uxtb	r3, r3
 800051e:	617b      	str	r3, [r7, #20]
			buf[i * 4 + j/2] = num;
 8000520:	6a3b      	ldr	r3, [r7, #32]
 8000522:	009a      	lsls	r2, r3, #2
 8000524:	69fb      	ldr	r3, [r7, #28]
 8000526:	085b      	lsrs	r3, r3, #1
 8000528:	4413      	add	r3, r2
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	4413      	add	r3, r2
 800052e:	697a      	ldr	r2, [r7, #20]
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	701a      	strb	r2, [r3, #0]
		for(size_t j=0;j<8;j+=2){
 8000534:	69fb      	ldr	r3, [r7, #28]
 8000536:	3302      	adds	r3, #2
 8000538:	61fb      	str	r3, [r7, #28]
 800053a:	69fb      	ldr	r3, [r7, #28]
 800053c:	2b07      	cmp	r3, #7
 800053e:	d9e5      	bls.n	800050c <Flash_Read+0x34>
	for(size_t i=0;i<num_bytes;i++){
 8000540:	6a3b      	ldr	r3, [r7, #32]
 8000542:	3301      	adds	r3, #1
 8000544:	623b      	str	r3, [r7, #32]
 8000546:	6a3a      	ldr	r2, [r7, #32]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	429a      	cmp	r2, r3
 800054c:	d3d9      	bcc.n	8000502 <Flash_Read+0x2a>
			//buf[i * 4 + k] = num / (int) pow(0x100,k) % 0x100;
		//}
	}


error:
 800054e:	bf00      	nop
	return status;
 8000550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000554:	4618      	mov	r0, r3
 8000556:	372c      	adds	r7, #44	; 0x2c
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <Flash_Write>:
HAL_StatusTypeDef Flash_Write(uint32_t start_address,uint8_t *buf,size_t num_bytes){
 8000560:	b5b0      	push	{r4, r5, r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 800056c:	2300      	movs	r3, #0
 800056e:	75fb      	strb	r3, [r7, #23]

		if(!buf){
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d102      	bne.n	800057c <Flash_Write+0x1c>
			status = HAL_ERROR;
 8000576:	2301      	movs	r3, #1
 8000578:	75fb      	strb	r3, [r7, #23]
			goto error;
 800057a:	e01f      	b.n	80005bc <Flash_Write+0x5c>
		}
		HAL_FLASH_Unlock ();
 800057c:	f000 fc1a 	bl	8000db4 <HAL_FLASH_Unlock>

		for(uint32_t i=0;i<num_bytes*4;i++){
 8000580:	2300      	movs	r3, #0
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	e013      	b.n	80005ae <Flash_Write+0x4e>
		    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,start_address+ 8 * i, buf[i]);
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	00da      	lsls	r2, r3, #3
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	18d1      	adds	r1, r2, r3
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	693b      	ldr	r3, [r7, #16]
 8000592:	4413      	add	r3, r2
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	2200      	movs	r2, #0
 800059a:	461c      	mov	r4, r3
 800059c:	4615      	mov	r5, r2
 800059e:	4622      	mov	r2, r4
 80005a0:	462b      	mov	r3, r5
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 fb9a 	bl	8000cdc <HAL_FLASH_Program>
		for(uint32_t i=0;i<num_bytes*4;i++){
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	3301      	adds	r3, #1
 80005ac:	613b      	str	r3, [r7, #16]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	693a      	ldr	r2, [r7, #16]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d3e6      	bcc.n	8000586 <Flash_Write+0x26>
		}

		HAL_FLASH_Lock();
 80005b8:	f000 fc1e 	bl	8000df8 <HAL_FLASH_Lock>

error:
	return status;
 80005bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3718      	adds	r7, #24
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bdb0      	pop	{r4, r5, r7, pc}

080005c6 <Flash_Erase_Page>:
void Flash_Erase_Page(uint8_t page_num,uint8_t num_pages){
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b088      	sub	sp, #32
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	4603      	mov	r3, r0
 80005ce:	460a      	mov	r2, r1
 80005d0:	71fb      	strb	r3, [r7, #7]
 80005d2:	4613      	mov	r3, r2
 80005d4:	71bb      	strb	r3, [r7, #6]
		HAL_FLASH_Unlock ();
 80005d6:	f000 fbed 	bl	8000db4 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef FLASH_EraseInitStruct = {0};
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
	FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80005e8:	2300      	movs	r3, #0
 80005ea:	613b      	str	r3, [r7, #16]
	FLASH_EraseInitStruct.Banks = FLASH_BANK_1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	617b      	str	r3, [r7, #20]
	FLASH_EraseInitStruct.Page = page_num;
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitStruct.NbPages = num_pages;
 80005f4:	79bb      	ldrb	r3, [r7, #6]
 80005f6:	61fb      	str	r3, [r7, #28]
	uint32_t  errorStatus = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]

	HAL_FLASHEx_Erase(&FLASH_EraseInitStruct,&errorStatus);
 80005fc:	f107 020c 	add.w	r2, r7, #12
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4611      	mov	r1, r2
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fcba 	bl	8000f80 <HAL_FLASHEx_Erase>

	HAL_FLASH_Lock();
 800060c:	f000 fbf4 	bl	8000df8 <HAL_FLASH_Lock>
}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 f9fb 	bl	8000a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f825 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 f8a5 	bl	8000774 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062a:	f000 f873 	bl	8000714 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  Flash_Erase_Page(254,2);
 800062e:	2102      	movs	r1, #2
 8000630:	20fe      	movs	r0, #254	; 0xfe
 8000632:	f7ff ffc8 	bl	80005c6 <Flash_Erase_Page>

  uint32_t nums[] = {0x98765,0xAAAAAAA,0xBBBBBBBB};
 8000636:	4a0c      	ldr	r2, [pc, #48]	; (8000668 <main+0x50>)
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	ca07      	ldmia	r2, {r0, r1, r2}
 800063e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  HAL_StatusTypeDef w = Flash_Write(0x807f000,nums,3);
 8000642:	f107 0310 	add.w	r3, r7, #16
 8000646:	2203      	movs	r2, #3
 8000648:	4619      	mov	r1, r3
 800064a:	4808      	ldr	r0, [pc, #32]	; (800066c <main+0x54>)
 800064c:	f7ff ff88 	bl	8000560 <Flash_Write>
 8000650:	4603      	mov	r3, r0
 8000652:	77fb      	strb	r3, [r7, #31]

  uint32_t read_nums[3];
  HAL_StatusTypeDef r = Flash_Read(0x807f000,read_nums,3);
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2203      	movs	r2, #3
 8000658:	4619      	mov	r1, r3
 800065a:	4804      	ldr	r0, [pc, #16]	; (800066c <main+0x54>)
 800065c:	f7ff ff3c 	bl	80004d8 <Flash_Read>
 8000660:	4603      	mov	r3, r0
 8000662:	77bb      	strb	r3, [r7, #30]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000664:	e7fe      	b.n	8000664 <main+0x4c>
 8000666:	bf00      	nop
 8000668:	0800325c 	.word	0x0800325c
 800066c:	0807f000 	.word	0x0807f000

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b096      	sub	sp, #88	; 0x58
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	2244      	movs	r2, #68	; 0x44
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f002 fdd8 	bl	8003234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	463b      	mov	r3, r7
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000692:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000696:	f000 ff39 	bl	800150c <HAL_PWREx_ControlVoltageScaling>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006a0:	f000 f8ce 	bl	8000840 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ae:	2340      	movs	r3, #64	; 0x40
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b6:	2302      	movs	r3, #2
 80006b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006be:	230a      	movs	r3, #10
 80006c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006c2:	2307      	movs	r3, #7
 80006c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 ff70 	bl	80015b8 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006de:	f000 f8af 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2303      	movs	r3, #3
 80006e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	2104      	movs	r1, #4
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 fb70 	bl	8001de0 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000706:	f000 f89b 	bl	8000840 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3758      	adds	r7, #88	; 0x58
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_USART2_UART_Init+0x58>)
 800071a:	4a15      	ldr	r2, [pc, #84]	; (8000770 <MX_USART2_UART_Init+0x5c>)
 800071c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_USART2_UART_Init+0x58>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_USART2_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_USART2_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_USART2_UART_Init+0x58>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_USART2_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_USART2_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_USART2_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_USART2_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_USART2_UART_Init+0x58>)
 8000758:	f002 f8c4 	bl	80028e4 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000762:	f000 f86d 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000048 	.word	0x20000048
 8000770:	40004400 	.word	0x40004400

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <MX_GPIO_Init+0xc4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a2a      	ldr	r2, [pc, #168]	; (8000838 <MX_GPIO_Init+0xc4>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b28      	ldr	r3, [pc, #160]	; (8000838 <MX_GPIO_Init+0xc4>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	4b25      	ldr	r3, [pc, #148]	; (8000838 <MX_GPIO_Init+0xc4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a24      	ldr	r2, [pc, #144]	; (8000838 <MX_GPIO_Init+0xc4>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b22      	ldr	r3, [pc, #136]	; (8000838 <MX_GPIO_Init+0xc4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <MX_GPIO_Init+0xc4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a1e      	ldr	r2, [pc, #120]	; (8000838 <MX_GPIO_Init+0xc4>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <MX_GPIO_Init+0xc4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_GPIO_Init+0xc4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a18      	ldr	r2, [pc, #96]	; (8000838 <MX_GPIO_Init+0xc4>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_GPIO_Init+0xc4>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2120      	movs	r1, #32
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f2:	f000 fe65 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <MX_GPIO_Init+0xc8>)
 800080e:	f000 fcdd 	bl	80011cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000812:	2320      	movs	r3, #32
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082c:	f000 fcce 	bl	80011cc <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40021000 	.word	0x40021000
 800083c:	48000800 	.word	0x48000800

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x8>
	...

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_MspInit+0x44>)
 8000854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <HAL_MspInit+0x44>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6613      	str	r3, [r2, #96]	; 0x60
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <HAL_MspInit+0x44>)
 8000860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_MspInit+0x44>)
 800086c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_MspInit+0x44>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	6593      	str	r3, [r2, #88]	; 0x58
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_MspInit+0x44>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000

08000894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b0a4      	sub	sp, #144	; 0x90
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2268      	movs	r2, #104	; 0x68
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 fcbd 	bl	8003234 <memset>
  if(huart->Instance==USART2)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a21      	ldr	r2, [pc, #132]	; (8000944 <HAL_UART_MspInit+0xb0>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d13a      	bne.n	800093a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 fca9 	bl	8002228 <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008dc:	f7ff ffb0 	bl	8000840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e0:	4b19      	ldr	r3, [pc, #100]	; (8000948 <HAL_UART_MspInit+0xb4>)
 80008e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e4:	4a18      	ldr	r2, [pc, #96]	; (8000948 <HAL_UART_MspInit+0xb4>)
 80008e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ea:	6593      	str	r3, [r2, #88]	; 0x58
 80008ec:	4b16      	ldr	r3, [pc, #88]	; (8000948 <HAL_UART_MspInit+0xb4>)
 80008ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <HAL_UART_MspInit+0xb4>)
 80008fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fc:	4a12      	ldr	r2, [pc, #72]	; (8000948 <HAL_UART_MspInit+0xb4>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_UART_MspInit+0xb4>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000910:	230c      	movs	r3, #12
 8000912:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000920:	2303      	movs	r3, #3
 8000922:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000926:	2307      	movs	r3, #7
 8000928:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000930:	4619      	mov	r1, r3
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f000 fc49 	bl	80011cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800093a:	bf00      	nop
 800093c:	3790      	adds	r7, #144	; 0x90
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40004400 	.word	0x40004400
 8000948:	40021000 	.word	0x40021000

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 f89a 	bl	8000ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <SystemInit+0x20>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <SystemInit+0x20>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009c8:	f7ff ffea 	bl	80009a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009cc:	480c      	ldr	r0, [pc, #48]	; (8000a00 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ce:	490d      	ldr	r1, [pc, #52]	; (8000a04 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d0:	4a0d      	ldr	r2, [pc, #52]	; (8000a08 <LoopForever+0xe>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e4:	4c0a      	ldr	r4, [pc, #40]	; (8000a10 <LoopForever+0x16>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009f2:	f002 fbfb 	bl	80031ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009f6:	f7ff fe0f 	bl	8000618 <main>

080009fa <LoopForever>:

LoopForever:
    b LoopForever
 80009fa:	e7fe      	b.n	80009fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009fc:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000a08:	080032c0 	.word	0x080032c0
  ldr r2, =_sbss
 8000a0c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000a10:	200000d0 	.word	0x200000d0

08000a14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC1_IRQHandler>
	...

08000a18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <HAL_Init+0x3c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <HAL_Init+0x3c>)
 8000a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a2c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a2e:	2003      	movs	r0, #3
 8000a30:	f000 f920 	bl	8000c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a34:	2000      	movs	r0, #0
 8000a36:	f000 f80f 	bl	8000a58 <HAL_InitTick>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d002      	beq.n	8000a46 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	71fb      	strb	r3, [r7, #7]
 8000a44:	e001      	b.n	8000a4a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a46:	f7ff ff01 	bl	800084c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40022000 	.word	0x40022000

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a60:	2300      	movs	r3, #0
 8000a62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a64:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <HAL_InitTick+0x6c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d023      	beq.n	8000ab4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <HAL_InitTick+0x70>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <HAL_InitTick+0x6c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f91d 	bl	8000cc2 <HAL_SYSTICK_Config>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d10f      	bne.n	8000aae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d809      	bhi.n	8000aa8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f000 f8f5 	bl	8000c8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aa0:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <HAL_InitTick+0x74>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
 8000aa6:	e007      	b.n	8000ab8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	73fb      	strb	r3, [r7, #15]
 8000aac:	e004      	b.n	8000ab8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	73fb      	strb	r3, [r7, #15]
 8000ab2:	e001      	b.n	8000ab8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000004 	.word	0x20000004

08000ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x20>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x24>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_IncTick+0x24>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008
 8000af4:	200000cc 	.word	0x200000cc

08000af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <HAL_GetTick+0x14>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	200000cc 	.word	0x200000cc

08000b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b42:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	60d3      	str	r3, [r2, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <__NVIC_GetPriorityGrouping+0x18>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	f003 0307 	and.w	r3, r3, #7
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db0a      	blt.n	8000b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	490c      	ldr	r1, [pc, #48]	; (8000bc0 <__NVIC_SetPriority+0x4c>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	440b      	add	r3, r1
 8000b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b9c:	e00a      	b.n	8000bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4908      	ldr	r1, [pc, #32]	; (8000bc4 <__NVIC_SetPriority+0x50>)
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	3b04      	subs	r3, #4
 8000bac:	0112      	lsls	r2, r2, #4
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	761a      	strb	r2, [r3, #24]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f1c3 0307 	rsb	r3, r3, #7
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	bf28      	it	cs
 8000be6:	2304      	movcs	r3, #4
 8000be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3304      	adds	r3, #4
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	d902      	bls.n	8000bf8 <NVIC_EncodePriority+0x30>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	e000      	b.n	8000bfa <NVIC_EncodePriority+0x32>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43da      	mvns	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	4313      	orrs	r3, r2
         );
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	; 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c40:	d301      	bcc.n	8000c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00f      	b.n	8000c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <SysTick_Config+0x40>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4e:	210f      	movs	r1, #15
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f7ff ff8e 	bl	8000b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <SysTick_Config+0x40>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <SysTick_Config+0x40>)
 8000c60:	2207      	movs	r2, #7
 8000c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	e000e010 	.word	0xe000e010

08000c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ff47 	bl	8000b10 <__NVIC_SetPriorityGrouping>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c9c:	f7ff ff5c 	bl	8000b58 <__NVIC_GetPriorityGrouping>
 8000ca0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	68b9      	ldr	r1, [r7, #8]
 8000ca6:	6978      	ldr	r0, [r7, #20]
 8000ca8:	f7ff ff8e 	bl	8000bc8 <NVIC_EncodePriority>
 8000cac:	4602      	mov	r2, r0
 8000cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff5d 	bl	8000b74 <__NVIC_SetPriority>
}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ffb0 	bl	8000c30 <SysTick_Config>
 8000cd0:	4603      	mov	r3, r0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000cee:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <HAL_FLASH_Program+0xd0>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d101      	bne.n	8000cfa <HAL_FLASH_Program+0x1e>
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	e053      	b.n	8000da2 <HAL_FLASH_Program+0xc6>
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	; (8000dac <HAL_FLASH_Program+0xd0>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d04:	f000 f888 	bl	8000e18 <FLASH_WaitForLastOperation>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8000d0c:	7dfb      	ldrb	r3, [r7, #23]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d143      	bne.n	8000d9a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d12:	4b26      	ldr	r3, [pc, #152]	; (8000dac <HAL_FLASH_Program+0xd0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000d18:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <HAL_FLASH_Program+0xd4>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d009      	beq.n	8000d38 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <HAL_FLASH_Program+0xd4>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a21      	ldr	r2, [pc, #132]	; (8000db0 <HAL_FLASH_Program+0xd4>)
 8000d2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <HAL_FLASH_Program+0xd0>)
 8000d32:	2202      	movs	r2, #2
 8000d34:	771a      	strb	r2, [r3, #28]
 8000d36:	e002      	b.n	8000d3e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000d38:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <HAL_FLASH_Program+0xd0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d107      	bne.n	8000d54 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8000d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d48:	68b8      	ldr	r0, [r7, #8]
 8000d4a:	f000 f8bd 	bl	8000ec8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	e010      	b.n	8000d76 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d002      	beq.n	8000d60 <HAL_FLASH_Program+0x84>
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d10a      	bne.n	8000d76 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	4619      	mov	r1, r3
 8000d64:	68b8      	ldr	r0, [r7, #8]
 8000d66:	f000 f8d5 	bl	8000f14 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d102      	bne.n	8000d76 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8000d70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d74:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d76:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d7a:	f000 f84d 	bl	8000e18 <FLASH_WaitForLastOperation>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d006      	beq.n	8000d96 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_FLASH_Program+0xd4>)
 8000d8a:	695a      	ldr	r2, [r3, #20]
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	4907      	ldr	r1, [pc, #28]	; (8000db0 <HAL_FLASH_Program+0xd4>)
 8000d92:	4013      	ands	r3, r2
 8000d94:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8000d96:	f000 f9cf 	bl	8001138 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <HAL_FLASH_Program+0xd0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]

  return status;
 8000da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000000c 	.word	0x2000000c
 8000db0:	40022000 	.word	0x40022000

08000db4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_FLASH_Unlock+0x38>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	da0b      	bge.n	8000dde <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_FLASH_Unlock+0x38>)
 8000dc8:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <HAL_FLASH_Unlock+0x3c>)
 8000dca:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <HAL_FLASH_Unlock+0x38>)
 8000dce:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <HAL_FLASH_Unlock+0x40>)
 8000dd0:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_FLASH_Unlock+0x38>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	da01      	bge.n	8000dde <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000dde:	79fb      	ldrb	r3, [r7, #7]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	40022000 	.word	0x40022000
 8000df0:	45670123 	.word	0x45670123
 8000df4:	cdef89ab 	.word	0xcdef89ab

08000df8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <HAL_FLASH_Lock+0x1c>)
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_FLASH_Lock+0x1c>)
 8000e02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e06:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	40022000 	.word	0x40022000

08000e18 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff fe6a 	bl	8000af8 <HAL_GetTick>
 8000e24:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000e26:	e00d      	b.n	8000e44 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2e:	d009      	beq.n	8000e44 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8000e30:	f7ff fe62 	bl	8000af8 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d801      	bhi.n	8000e44 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e036      	b.n	8000eb2 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000e44:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <FLASH_WaitForLastOperation+0xa4>)
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1eb      	bne.n	8000e28 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8000e50:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <FLASH_WaitForLastOperation+0xa4>)
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <FLASH_WaitForLastOperation+0xa8>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d01e      	beq.n	8000e9e <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <FLASH_WaitForLastOperation+0xac>)
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	4a16      	ldr	r2, [pc, #88]	; (8000ec4 <FLASH_WaitForLastOperation+0xac>)
 8000e6a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <FLASH_WaitForLastOperation+0x6e>
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <FLASH_WaitForLastOperation+0xa4>)
 8000e78:	699a      	ldr	r2, [r3, #24]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000e80:	490e      	ldr	r1, [pc, #56]	; (8000ebc <FLASH_WaitForLastOperation+0xa4>)
 8000e82:	4313      	orrs	r3, r2
 8000e84:	618b      	str	r3, [r1, #24]
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d004      	beq.n	8000e9a <FLASH_WaitForLastOperation+0x82>
 8000e90:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <FLASH_WaitForLastOperation+0xa4>)
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000e98:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e009      	b.n	8000eb2 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <FLASH_WaitForLastOperation+0xa4>)
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d002      	beq.n	8000eb0 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <FLASH_WaitForLastOperation+0xa4>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40022000 	.word	0x40022000
 8000ec0:	0002c3fa 	.word	0x0002c3fa
 8000ec4:	2000000c 	.word	0x2000000c

08000ec8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <FLASH_Program_DoubleWord+0x48>)
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <FLASH_Program_DoubleWord+0x48>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000ee6:	f3bf 8f6f 	isb	sy
}
 8000eea:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8000eec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	f04f 0300 	mov.w	r3, #0
 8000ef8:	000a      	movs	r2, r1
 8000efa:	2300      	movs	r3, #0
 8000efc:	68f9      	ldr	r1, [r7, #12]
 8000efe:	3104      	adds	r1, #4
 8000f00:	4613      	mov	r3, r2
 8000f02:	600b      	str	r3, [r1, #0]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	40022000 	.word	0x40022000

08000f14 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8000f1e:	2340      	movs	r3, #64	; 0x40
 8000f20:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <FLASH_Program_Fast+0x68>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <FLASH_Program_Fast+0x68>)
 8000f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f34:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f36:	f3ef 8310 	mrs	r3, PRIMASK
 8000f3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8000f3c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8000f3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	3304      	adds	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3304      	adds	r3, #4
 8000f56:	617b      	str	r3, [r7, #20]
    row_index--;
 8000f58:	7ffb      	ldrb	r3, [r7, #31]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8000f5e:	7ffb      	ldrb	r3, [r7, #31]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1ef      	bne.n	8000f44 <FLASH_Program_Fast+0x30>
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	f383 8810 	msr	PRIMASK, r3
}
 8000f6e:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8000f70:	bf00      	nop
 8000f72:	3724      	adds	r7, #36	; 0x24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40022000 	.word	0x40022000

08000f80 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f8a:	4b48      	ldr	r3, [pc, #288]	; (80010ac <HAL_FLASHEx_Erase+0x12c>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d101      	bne.n	8000f96 <HAL_FLASHEx_Erase+0x16>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e085      	b.n	80010a2 <HAL_FLASHEx_Erase+0x122>
 8000f96:	4b45      	ldr	r3, [pc, #276]	; (80010ac <HAL_FLASHEx_Erase+0x12c>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fa0:	f7ff ff3a 	bl	8000e18 <FLASH_WaitForLastOperation>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d175      	bne.n	800109a <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fae:	4b3f      	ldr	r3, [pc, #252]	; (80010ac <HAL_FLASHEx_Erase+0x12c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8000fb4:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <HAL_FLASHEx_Erase+0x130>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d013      	beq.n	8000fe8 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000fc0:	4b3b      	ldr	r3, [pc, #236]	; (80010b0 <HAL_FLASHEx_Erase+0x130>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d009      	beq.n	8000fe0 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8000fcc:	4b38      	ldr	r3, [pc, #224]	; (80010b0 <HAL_FLASHEx_Erase+0x130>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a37      	ldr	r2, [pc, #220]	; (80010b0 <HAL_FLASHEx_Erase+0x130>)
 8000fd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fd6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8000fd8:	4b34      	ldr	r3, [pc, #208]	; (80010ac <HAL_FLASHEx_Erase+0x12c>)
 8000fda:	2203      	movs	r2, #3
 8000fdc:	771a      	strb	r2, [r3, #28]
 8000fde:	e016      	b.n	800100e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8000fe0:	4b32      	ldr	r3, [pc, #200]	; (80010ac <HAL_FLASHEx_Erase+0x12c>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	771a      	strb	r2, [r3, #28]
 8000fe6:	e012      	b.n	800100e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000fe8:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <HAL_FLASHEx_Erase+0x130>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d009      	beq.n	8001008 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8000ff4:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <HAL_FLASHEx_Erase+0x130>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a2d      	ldr	r2, [pc, #180]	; (80010b0 <HAL_FLASHEx_Erase+0x130>)
 8000ffa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ffe:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001000:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <HAL_FLASHEx_Erase+0x12c>)
 8001002:	2202      	movs	r2, #2
 8001004:	771a      	strb	r2, [r3, #28]
 8001006:	e002      	b.n	800100e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001008:	4b28      	ldr	r3, [pc, #160]	; (80010ac <HAL_FLASHEx_Erase+0x12c>)
 800100a:	2200      	movs	r2, #0
 800100c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d111      	bne.n	800103a <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f84a 	bl	80010b4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001020:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001024:	f7ff fef8 	bl	8000e18 <FLASH_WaitForLastOperation>
 8001028:	4603      	mov	r3, r0
 800102a:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800102c:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <HAL_FLASHEx_Erase+0x130>)
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	4a1f      	ldr	r2, [pc, #124]	; (80010b0 <HAL_FLASHEx_Erase+0x130>)
 8001032:	f023 0304 	bic.w	r3, r3, #4
 8001036:	6153      	str	r3, [r2, #20]
 8001038:	e02d      	b.n	8001096 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	e01d      	b.n	8001086 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	4619      	mov	r1, r3
 8001050:	68b8      	ldr	r0, [r7, #8]
 8001052:	f000 f84d 	bl	80010f0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001056:	f24c 3050 	movw	r0, #50000	; 0xc350
 800105a:	f7ff fedd 	bl	8000e18 <FLASH_WaitForLastOperation>
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <HAL_FLASHEx_Erase+0x130>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <HAL_FLASHEx_Erase+0x130>)
 8001068:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800106c:	f023 0302 	bic.w	r3, r3, #2
 8001070:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	601a      	str	r2, [r3, #0]
          break;
 800107e:	e00a      	b.n	8001096 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	3301      	adds	r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	4413      	add	r3, r2
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	429a      	cmp	r2, r3
 8001094:	d3d9      	bcc.n	800104a <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001096:	f000 f84f 	bl	8001138 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <HAL_FLASHEx_Erase+0x12c>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]

  return status;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2000000c 	.word	0x2000000c
 80010b0:	40022000 	.word	0x40022000

080010b4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d005      	beq.n	80010d2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <FLASH_MassErase+0x38>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4a08      	ldr	r2, [pc, #32]	; (80010ec <FLASH_MassErase+0x38>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <FLASH_MassErase+0x38>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <FLASH_MassErase+0x38>)
 80010d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010dc:	6153      	str	r3, [r2, #20]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40022000 	.word	0x40022000

080010f0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <FLASH_PageErase+0x44>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800110a:	490a      	ldr	r1, [pc, #40]	; (8001134 <FLASH_PageErase+0x44>)
 800110c:	4313      	orrs	r3, r2
 800110e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <FLASH_PageErase+0x44>)
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	4a07      	ldr	r2, [pc, #28]	; (8001134 <FLASH_PageErase+0x44>)
 8001116:	f043 0302 	orr.w	r3, r3, #2
 800111a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <FLASH_PageErase+0x44>)
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <FLASH_PageErase+0x44>)
 8001122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001126:	6153      	str	r3, [r2, #20]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	40022000 	.word	0x40022000

08001138 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800113e:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <FLASH_FlushCaches+0x8c>)
 8001140:	7f1b      	ldrb	r3, [r3, #28]
 8001142:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d002      	beq.n	8001150 <FLASH_FlushCaches+0x18>
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b03      	cmp	r3, #3
 800114e:	d117      	bne.n	8001180 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <FLASH_FlushCaches+0x90>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <FLASH_FlushCaches+0x90>)
 8001156:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800115a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <FLASH_FlushCaches+0x90>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <FLASH_FlushCaches+0x90>)
 8001162:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <FLASH_FlushCaches+0x90>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a16      	ldr	r2, [pc, #88]	; (80011c8 <FLASH_FlushCaches+0x90>)
 800116e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001172:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <FLASH_FlushCaches+0x90>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <FLASH_FlushCaches+0x90>)
 800117a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b02      	cmp	r3, #2
 8001184:	d002      	beq.n	800118c <FLASH_FlushCaches+0x54>
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b03      	cmp	r3, #3
 800118a:	d111      	bne.n	80011b0 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <FLASH_FlushCaches+0x90>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <FLASH_FlushCaches+0x90>)
 8001192:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <FLASH_FlushCaches+0x90>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <FLASH_FlushCaches+0x90>)
 800119e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011a2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <FLASH_FlushCaches+0x90>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <FLASH_FlushCaches+0x90>)
 80011aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ae:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <FLASH_FlushCaches+0x8c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	771a      	strb	r2, [r3, #28]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	2000000c 	.word	0x2000000c
 80011c8:	40022000 	.word	0x40022000

080011cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b087      	sub	sp, #28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011da:	e154      	b.n	8001486 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	2101      	movs	r1, #1
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	4013      	ands	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 8146 	beq.w	8001480 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d005      	beq.n	800120c <HAL_GPIO_Init+0x40>
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d130      	bne.n	800126e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001242:	2201      	movs	r2, #1
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	091b      	lsrs	r3, r3, #4
 8001258:	f003 0201 	and.w	r2, r3, #1
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	2b03      	cmp	r3, #3
 8001278:	d017      	beq.n	80012aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d123      	bne.n	80012fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	08da      	lsrs	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3208      	adds	r2, #8
 80012be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	220f      	movs	r2, #15
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	691a      	ldr	r2, [r3, #16]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	08da      	lsrs	r2, r3, #3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3208      	adds	r2, #8
 80012f8:	6939      	ldr	r1, [r7, #16]
 80012fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0203 	and.w	r2, r3, #3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 80a0 	beq.w	8001480 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001340:	4b58      	ldr	r3, [pc, #352]	; (80014a4 <HAL_GPIO_Init+0x2d8>)
 8001342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001344:	4a57      	ldr	r2, [pc, #348]	; (80014a4 <HAL_GPIO_Init+0x2d8>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6613      	str	r3, [r2, #96]	; 0x60
 800134c:	4b55      	ldr	r3, [pc, #340]	; (80014a4 <HAL_GPIO_Init+0x2d8>)
 800134e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001358:	4a53      	ldr	r2, [pc, #332]	; (80014a8 <HAL_GPIO_Init+0x2dc>)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	3302      	adds	r3, #2
 8001360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	220f      	movs	r2, #15
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001382:	d019      	beq.n	80013b8 <HAL_GPIO_Init+0x1ec>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a49      	ldr	r2, [pc, #292]	; (80014ac <HAL_GPIO_Init+0x2e0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d013      	beq.n	80013b4 <HAL_GPIO_Init+0x1e8>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a48      	ldr	r2, [pc, #288]	; (80014b0 <HAL_GPIO_Init+0x2e4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d00d      	beq.n	80013b0 <HAL_GPIO_Init+0x1e4>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a47      	ldr	r2, [pc, #284]	; (80014b4 <HAL_GPIO_Init+0x2e8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d007      	beq.n	80013ac <HAL_GPIO_Init+0x1e0>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a46      	ldr	r2, [pc, #280]	; (80014b8 <HAL_GPIO_Init+0x2ec>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d101      	bne.n	80013a8 <HAL_GPIO_Init+0x1dc>
 80013a4:	2304      	movs	r3, #4
 80013a6:	e008      	b.n	80013ba <HAL_GPIO_Init+0x1ee>
 80013a8:	2307      	movs	r3, #7
 80013aa:	e006      	b.n	80013ba <HAL_GPIO_Init+0x1ee>
 80013ac:	2303      	movs	r3, #3
 80013ae:	e004      	b.n	80013ba <HAL_GPIO_Init+0x1ee>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e002      	b.n	80013ba <HAL_GPIO_Init+0x1ee>
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <HAL_GPIO_Init+0x1ee>
 80013b8:	2300      	movs	r3, #0
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	f002 0203 	and.w	r2, r2, #3
 80013c0:	0092      	lsls	r2, r2, #2
 80013c2:	4093      	lsls	r3, r2
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013ca:	4937      	ldr	r1, [pc, #220]	; (80014a8 <HAL_GPIO_Init+0x2dc>)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013d8:	4b38      	ldr	r3, [pc, #224]	; (80014bc <HAL_GPIO_Init+0x2f0>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013fc:	4a2f      	ldr	r2, [pc, #188]	; (80014bc <HAL_GPIO_Init+0x2f0>)
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001402:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <HAL_GPIO_Init+0x2f0>)
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	43db      	mvns	r3, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001426:	4a25      	ldr	r2, [pc, #148]	; (80014bc <HAL_GPIO_Init+0x2f0>)
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <HAL_GPIO_Init+0x2f0>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	43db      	mvns	r3, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001450:	4a1a      	ldr	r2, [pc, #104]	; (80014bc <HAL_GPIO_Init+0x2f0>)
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001456:	4b19      	ldr	r3, [pc, #100]	; (80014bc <HAL_GPIO_Init+0x2f0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	43db      	mvns	r3, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800147a:	4a10      	ldr	r2, [pc, #64]	; (80014bc <HAL_GPIO_Init+0x2f0>)
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	3301      	adds	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	fa22 f303 	lsr.w	r3, r2, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	f47f aea3 	bne.w	80011dc <HAL_GPIO_Init+0x10>
  }
}
 8001496:	bf00      	nop
 8001498:	bf00      	nop
 800149a:	371c      	adds	r7, #28
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010000 	.word	0x40010000
 80014ac:	48000400 	.word	0x48000400
 80014b0:	48000800 	.word	0x48000800
 80014b4:	48000c00 	.word	0x48000c00
 80014b8:	48001000 	.word	0x48001000
 80014bc:	40010400 	.word	0x40010400

080014c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
 80014cc:	4613      	mov	r3, r2
 80014ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d0:	787b      	ldrb	r3, [r7, #1]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <HAL_PWREx_GetVoltageRange+0x18>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40007000 	.word	0x40007000

0800150c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800151a:	d130      	bne.n	800157e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800151c:	4b23      	ldr	r3, [pc, #140]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001528:	d038      	beq.n	800159c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001532:	4a1e      	ldr	r2, [pc, #120]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001534:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001538:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2232      	movs	r2, #50	; 0x32
 8001540:	fb02 f303 	mul.w	r3, r2, r3
 8001544:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001546:	fba2 2303 	umull	r2, r3, r2, r3
 800154a:	0c9b      	lsrs	r3, r3, #18
 800154c:	3301      	adds	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001550:	e002      	b.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3b01      	subs	r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001564:	d102      	bne.n	800156c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f2      	bne.n	8001552 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001578:	d110      	bne.n	800159c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e00f      	b.n	800159e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800158a:	d007      	beq.n	800159c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001594:	4a05      	ldr	r2, [pc, #20]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40007000 	.word	0x40007000
 80015b0:	20000000 	.word	0x20000000
 80015b4:	431bde83 	.word	0x431bde83

080015b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d102      	bne.n	80015cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	f000 bc02 	b.w	8001dd0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015cc:	4b96      	ldr	r3, [pc, #600]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d6:	4b94      	ldr	r3, [pc, #592]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0310 	and.w	r3, r3, #16
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80e4 	beq.w	80017b6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d007      	beq.n	8001604 <HAL_RCC_OscConfig+0x4c>
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2b0c      	cmp	r3, #12
 80015f8:	f040 808b 	bne.w	8001712 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	f040 8087 	bne.w	8001712 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001604:	4b88      	ldr	r3, [pc, #544]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_OscConfig+0x64>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e3d9      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1a      	ldr	r2, [r3, #32]
 8001620:	4b81      	ldr	r3, [pc, #516]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d004      	beq.n	8001636 <HAL_RCC_OscConfig+0x7e>
 800162c:	4b7e      	ldr	r3, [pc, #504]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001634:	e005      	b.n	8001642 <HAL_RCC_OscConfig+0x8a>
 8001636:	4b7c      	ldr	r3, [pc, #496]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163c:	091b      	lsrs	r3, r3, #4
 800163e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001642:	4293      	cmp	r3, r2
 8001644:	d223      	bcs.n	800168e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	4618      	mov	r0, r3
 800164c:	f000 fd8c 	bl	8002168 <RCC_SetFlashLatencyFromMSIRange>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e3ba      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800165a:	4b73      	ldr	r3, [pc, #460]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a72      	ldr	r2, [pc, #456]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001660:	f043 0308 	orr.w	r3, r3, #8
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b70      	ldr	r3, [pc, #448]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	496d      	ldr	r1, [pc, #436]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001678:	4b6b      	ldr	r3, [pc, #428]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	4968      	ldr	r1, [pc, #416]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001688:	4313      	orrs	r3, r2
 800168a:	604b      	str	r3, [r1, #4]
 800168c:	e025      	b.n	80016da <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800168e:	4b66      	ldr	r3, [pc, #408]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a65      	ldr	r2, [pc, #404]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001694:	f043 0308 	orr.w	r3, r3, #8
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b63      	ldr	r3, [pc, #396]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	4960      	ldr	r1, [pc, #384]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ac:	4b5e      	ldr	r3, [pc, #376]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	495b      	ldr	r1, [pc, #364]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d109      	bne.n	80016da <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fd4c 	bl	8002168 <RCC_SetFlashLatencyFromMSIRange>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e37a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016da:	f000 fc81 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 80016de:	4602      	mov	r2, r0
 80016e0:	4b51      	ldr	r3, [pc, #324]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	4950      	ldr	r1, [pc, #320]	; (800182c <HAL_RCC_OscConfig+0x274>)
 80016ec:	5ccb      	ldrb	r3, [r1, r3]
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	fa22 f303 	lsr.w	r3, r2, r3
 80016f6:	4a4e      	ldr	r2, [pc, #312]	; (8001830 <HAL_RCC_OscConfig+0x278>)
 80016f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016fa:	4b4e      	ldr	r3, [pc, #312]	; (8001834 <HAL_RCC_OscConfig+0x27c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff f9aa 	bl	8000a58 <HAL_InitTick>
 8001704:	4603      	mov	r3, r0
 8001706:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d052      	beq.n	80017b4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	e35e      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d032      	beq.n	8001780 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800171a:	4b43      	ldr	r3, [pc, #268]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a42      	ldr	r2, [pc, #264]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001726:	f7ff f9e7 	bl	8000af8 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800172e:	f7ff f9e3 	bl	8000af8 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e347      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001740:	4b39      	ldr	r3, [pc, #228]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800174c:	4b36      	ldr	r3, [pc, #216]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a35      	ldr	r2, [pc, #212]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001752:	f043 0308 	orr.w	r3, r3, #8
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b33      	ldr	r3, [pc, #204]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	4930      	ldr	r1, [pc, #192]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800176a:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	492b      	ldr	r1, [pc, #172]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800177a:	4313      	orrs	r3, r2
 800177c:	604b      	str	r3, [r1, #4]
 800177e:	e01a      	b.n	80017b6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001780:	4b29      	ldr	r3, [pc, #164]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a28      	ldr	r2, [pc, #160]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800178c:	f7ff f9b4 	bl	8000af8 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001794:	f7ff f9b0 	bl	8000af8 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e314      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017a6:	4b20      	ldr	r3, [pc, #128]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x1dc>
 80017b2:	e000      	b.n	80017b6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d073      	beq.n	80018aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_OscConfig+0x21c>
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d10e      	bne.n	80017ec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d10b      	bne.n	80017ec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d063      	beq.n	80018a8 <HAL_RCC_OscConfig+0x2f0>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d15f      	bne.n	80018a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e2f1      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f4:	d106      	bne.n	8001804 <HAL_RCC_OscConfig+0x24c>
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80017fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	e025      	b.n	8001850 <HAL_RCC_OscConfig+0x298>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800180c:	d114      	bne.n	8001838 <HAL_RCC_OscConfig+0x280>
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a02      	ldr	r2, [pc, #8]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e013      	b.n	8001850 <HAL_RCC_OscConfig+0x298>
 8001828:	40021000 	.word	0x40021000
 800182c:	08003268 	.word	0x08003268
 8001830:	20000000 	.word	0x20000000
 8001834:	20000004 	.word	0x20000004
 8001838:	4ba0      	ldr	r3, [pc, #640]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a9f      	ldr	r2, [pc, #636]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800183e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b9d      	ldr	r3, [pc, #628]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a9c      	ldr	r2, [pc, #624]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800184a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800184e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d013      	beq.n	8001880 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff f94e 	bl	8000af8 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001860:	f7ff f94a 	bl	8000af8 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	; 0x64
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e2ae      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001872:	4b92      	ldr	r3, [pc, #584]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x2a8>
 800187e:	e014      	b.n	80018aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff f93a 	bl	8000af8 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff f936 	bl	8000af8 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e29a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800189a:	4b88      	ldr	r3, [pc, #544]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x2d0>
 80018a6:	e000      	b.n	80018aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d060      	beq.n	8001978 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_OscConfig+0x310>
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2b0c      	cmp	r3, #12
 80018c0:	d119      	bne.n	80018f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d116      	bne.n	80018f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c8:	4b7c      	ldr	r3, [pc, #496]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_OscConfig+0x328>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e277      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4b76      	ldr	r3, [pc, #472]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	061b      	lsls	r3, r3, #24
 80018ee:	4973      	ldr	r1, [pc, #460]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f4:	e040      	b.n	8001978 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d023      	beq.n	8001946 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018fe:	4b6f      	ldr	r3, [pc, #444]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a6e      	ldr	r2, [pc, #440]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190a:	f7ff f8f5 	bl	8000af8 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001912:	f7ff f8f1 	bl	8000af8 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e255      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001924:	4b65      	ldr	r3, [pc, #404]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001930:	4b62      	ldr	r3, [pc, #392]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	061b      	lsls	r3, r3, #24
 800193e:	495f      	ldr	r1, [pc, #380]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
 8001944:	e018      	b.n	8001978 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001946:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a5c      	ldr	r2, [pc, #368]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800194c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001952:	f7ff f8d1 	bl	8000af8 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195a:	f7ff f8cd 	bl	8000af8 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e231      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800196c:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f0      	bne.n	800195a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d03c      	beq.n	80019fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d01c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800198c:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800198e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001992:	4a4a      	ldr	r2, [pc, #296]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199c:	f7ff f8ac 	bl	8000af8 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a4:	f7ff f8a8 	bl	8000af8 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e20c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019b6:	4b41      	ldr	r3, [pc, #260]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80019b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0ef      	beq.n	80019a4 <HAL_RCC_OscConfig+0x3ec>
 80019c4:	e01b      	b.n	80019fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c6:	4b3d      	ldr	r3, [pc, #244]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80019c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019cc:	4a3b      	ldr	r2, [pc, #236]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d6:	f7ff f88f 	bl	8000af8 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019de:	f7ff f88b 	bl	8000af8 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e1ef      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f0:	4b32      	ldr	r3, [pc, #200]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80019f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1ef      	bne.n	80019de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80a6 	beq.w	8001b58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a10:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10d      	bne.n	8001a38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1c:	4b27      	ldr	r3, [pc, #156]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	4a26      	ldr	r2, [pc, #152]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a26:	6593      	str	r3, [r2, #88]	; 0x58
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a34:	2301      	movs	r3, #1
 8001a36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <HAL_RCC_OscConfig+0x508>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d118      	bne.n	8001a76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a44:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <HAL_RCC_OscConfig+0x508>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1d      	ldr	r2, [pc, #116]	; (8001ac0 <HAL_RCC_OscConfig+0x508>)
 8001a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a50:	f7ff f852 	bl	8000af8 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a58:	f7ff f84e 	bl	8000af8 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e1b2      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_RCC_OscConfig+0x508>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d108      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4d8>
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a84:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a8e:	e029      	b.n	8001ae4 <HAL_RCC_OscConfig+0x52c>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b05      	cmp	r3, #5
 8001a96:	d115      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x50c>
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9e:	4a07      	ldr	r2, [pc, #28]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aae:	4a03      	ldr	r2, [pc, #12]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab8:	e014      	b.n	8001ae4 <HAL_RCC_OscConfig+0x52c>
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40007000 	.word	0x40007000
 8001ac4:	4b9a      	ldr	r3, [pc, #616]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aca:	4a99      	ldr	r2, [pc, #612]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001acc:	f023 0301 	bic.w	r3, r3, #1
 8001ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad4:	4b96      	ldr	r3, [pc, #600]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ada:	4a95      	ldr	r2, [pc, #596]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001adc:	f023 0304 	bic.w	r3, r3, #4
 8001ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d016      	beq.n	8001b1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aec:	f7ff f804 	bl	8000af8 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af4:	f7ff f800 	bl	8000af8 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e162      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b0a:	4b89      	ldr	r3, [pc, #548]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0ed      	beq.n	8001af4 <HAL_RCC_OscConfig+0x53c>
 8001b18:	e015      	b.n	8001b46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1a:	f7fe ffed 	bl	8000af8 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b20:	e00a      	b.n	8001b38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b22:	f7fe ffe9 	bl	8000af8 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e14b      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b38:	4b7d      	ldr	r3, [pc, #500]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1ed      	bne.n	8001b22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b46:	7ffb      	ldrb	r3, [r7, #31]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b4c:	4b78      	ldr	r3, [pc, #480]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b50:	4a77      	ldr	r2, [pc, #476]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b56:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d03c      	beq.n	8001bde <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d01c      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b6c:	4b70      	ldr	r3, [pc, #448]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b72:	4a6f      	ldr	r2, [pc, #444]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7c:	f7fe ffbc 	bl	8000af8 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b84:	f7fe ffb8 	bl	8000af8 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e11c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b96:	4b66      	ldr	r3, [pc, #408]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0ef      	beq.n	8001b84 <HAL_RCC_OscConfig+0x5cc>
 8001ba4:	e01b      	b.n	8001bde <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ba6:	4b62      	ldr	r3, [pc, #392]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001ba8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bac:	4a60      	ldr	r2, [pc, #384]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001bae:	f023 0301 	bic.w	r3, r3, #1
 8001bb2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb6:	f7fe ff9f 	bl	8000af8 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bbe:	f7fe ff9b 	bl	8000af8 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e0ff      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bd0:	4b57      	ldr	r3, [pc, #348]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001bd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1ef      	bne.n	8001bbe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 80f3 	beq.w	8001dce <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	f040 80c9 	bne.w	8001d84 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bf2:	4b4f      	ldr	r3, [pc, #316]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f003 0203 	and.w	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d12c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	3b01      	subs	r3, #1
 8001c12:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d123      	bne.n	8001c60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c22:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d11b      	bne.n	8001c60 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c32:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d113      	bne.n	8001c60 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c42:	085b      	lsrs	r3, r3, #1
 8001c44:	3b01      	subs	r3, #1
 8001c46:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d109      	bne.n	8001c60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	085b      	lsrs	r3, r3, #1
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d06b      	beq.n	8001d38 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	2b0c      	cmp	r3, #12
 8001c64:	d062      	beq.n	8001d2c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c66:	4b32      	ldr	r3, [pc, #200]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e0ac      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c76:	4b2e      	ldr	r3, [pc, #184]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a2d      	ldr	r2, [pc, #180]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001c7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c80:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c82:	f7fe ff39 	bl	8000af8 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8a:	f7fe ff35 	bl	8000af8 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e099      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c9c:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f0      	bne.n	8001c8a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca8:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <HAL_RCC_OscConfig+0x77c>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cb8:	3a01      	subs	r2, #1
 8001cba:	0112      	lsls	r2, r2, #4
 8001cbc:	4311      	orrs	r1, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cc2:	0212      	lsls	r2, r2, #8
 8001cc4:	4311      	orrs	r1, r2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cca:	0852      	lsrs	r2, r2, #1
 8001ccc:	3a01      	subs	r2, #1
 8001cce:	0552      	lsls	r2, r2, #21
 8001cd0:	4311      	orrs	r1, r2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cd6:	0852      	lsrs	r2, r2, #1
 8001cd8:	3a01      	subs	r2, #1
 8001cda:	0652      	lsls	r2, r2, #25
 8001cdc:	4311      	orrs	r1, r2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ce2:	06d2      	lsls	r2, r2, #27
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	4912      	ldr	r1, [pc, #72]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0f      	ldr	r2, [pc, #60]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cf6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	4a0c      	ldr	r2, [pc, #48]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d04:	f7fe fef8 	bl	8000af8 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0c:	f7fe fef4 	bl	8000af8 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e058      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <HAL_RCC_OscConfig+0x778>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d2a:	e050      	b.n	8001dce <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e04f      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
 8001d30:	40021000 	.word	0x40021000
 8001d34:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_RCC_OscConfig+0x820>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d144      	bne.n	8001dce <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <HAL_RCC_OscConfig+0x820>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a23      	ldr	r2, [pc, #140]	; (8001dd8 <HAL_RCC_OscConfig+0x820>)
 8001d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_RCC_OscConfig+0x820>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4a20      	ldr	r2, [pc, #128]	; (8001dd8 <HAL_RCC_OscConfig+0x820>)
 8001d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d5c:	f7fe fecc 	bl	8000af8 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d64:	f7fe fec8 	bl	8000af8 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e02c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_RCC_OscConfig+0x820>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x7ac>
 8001d82:	e024      	b.n	8001dce <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	2b0c      	cmp	r3, #12
 8001d88:	d01f      	beq.n	8001dca <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <HAL_RCC_OscConfig+0x820>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <HAL_RCC_OscConfig+0x820>)
 8001d90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d96:	f7fe feaf 	bl	8000af8 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9e:	f7fe feab 	bl	8000af8 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e00f      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_RCC_OscConfig+0x820>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f0      	bne.n	8001d9e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_RCC_OscConfig+0x820>)
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	4905      	ldr	r1, [pc, #20]	; (8001dd8 <HAL_RCC_OscConfig+0x820>)
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_RCC_OscConfig+0x824>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60cb      	str	r3, [r1, #12]
 8001dc8:	e001      	b.n	8001dce <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3720      	adds	r7, #32
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	feeefffc 	.word	0xfeeefffc

08001de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0e7      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df4:	4b75      	ldr	r3, [pc, #468]	; (8001fcc <HAL_RCC_ClockConfig+0x1ec>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d910      	bls.n	8001e24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b72      	ldr	r3, [pc, #456]	; (8001fcc <HAL_RCC_ClockConfig+0x1ec>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 0207 	bic.w	r2, r3, #7
 8001e0a:	4970      	ldr	r1, [pc, #448]	; (8001fcc <HAL_RCC_ClockConfig+0x1ec>)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b6e      	ldr	r3, [pc, #440]	; (8001fcc <HAL_RCC_ClockConfig+0x1ec>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0cf      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d010      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	4b66      	ldr	r3, [pc, #408]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d908      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e40:	4b63      	ldr	r3, [pc, #396]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	4960      	ldr	r1, [pc, #384]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d04c      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d107      	bne.n	8001e76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e66:	4b5a      	ldr	r3, [pc, #360]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d121      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e0a6      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e7e:	4b54      	ldr	r3, [pc, #336]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d115      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e09a      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e96:	4b4e      	ldr	r3, [pc, #312]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d109      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e08e      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea6:	4b4a      	ldr	r3, [pc, #296]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e086      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eb6:	4b46      	ldr	r3, [pc, #280]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f023 0203 	bic.w	r2, r3, #3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	4943      	ldr	r1, [pc, #268]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ec8:	f7fe fe16 	bl	8000af8 <HAL_GetTick>
 8001ecc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ece:	e00a      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed0:	f7fe fe12 	bl	8000af8 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e06e      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee6:	4b3a      	ldr	r3, [pc, #232]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 020c 	and.w	r2, r3, #12
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d1eb      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d010      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d208      	bcs.n	8001f26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f14:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	492b      	ldr	r1, [pc, #172]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f26:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <HAL_RCC_ClockConfig+0x1ec>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d210      	bcs.n	8001f56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f34:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <HAL_RCC_ClockConfig+0x1ec>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f023 0207 	bic.w	r2, r3, #7
 8001f3c:	4923      	ldr	r1, [pc, #140]	; (8001fcc <HAL_RCC_ClockConfig+0x1ec>)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f44:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <HAL_RCC_ClockConfig+0x1ec>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e036      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d008      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	4918      	ldr	r1, [pc, #96]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d009      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4910      	ldr	r1, [pc, #64]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f94:	f000 f824 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	490b      	ldr	r1, [pc, #44]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f4>)
 8001fa6:	5ccb      	ldrb	r3, [r1, r3]
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb0:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_RCC_ClockConfig+0x1fc>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fd4d 	bl	8000a58 <HAL_InitTick>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fc2:	7afb      	ldrb	r3, [r7, #11]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40022000 	.word	0x40022000
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	08003268 	.word	0x08003268
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	20000004 	.word	0x20000004

08001fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fee:	4b3e      	ldr	r3, [pc, #248]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ff8:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x34>
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	2b0c      	cmp	r3, #12
 800200c:	d121      	bne.n	8002052 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d11e      	bne.n	8002052 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002014:	4b34      	ldr	r3, [pc, #208]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d107      	bne.n	8002030 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002020:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	e005      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002030:	4b2d      	ldr	r3, [pc, #180]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800203c:	4a2b      	ldr	r2, [pc, #172]	; (80020ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002044:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10d      	bne.n	8002068 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002050:	e00a      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2b04      	cmp	r3, #4
 8002056:	d102      	bne.n	800205e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002058:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	e004      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b08      	cmp	r3, #8
 8002062:	d101      	bne.n	8002068 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002064:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002066:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	2b0c      	cmp	r3, #12
 800206c:	d134      	bne.n	80020d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800206e:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d003      	beq.n	8002086 <HAL_RCC_GetSysClockFreq+0xa6>
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d003      	beq.n	800208c <HAL_RCC_GetSysClockFreq+0xac>
 8002084:	e005      	b.n	8002092 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002086:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002088:	617b      	str	r3, [r7, #20]
      break;
 800208a:	e005      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800208e:	617b      	str	r3, [r7, #20]
      break;
 8002090:	e002      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	617b      	str	r3, [r7, #20]
      break;
 8002096:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002098:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	3301      	adds	r3, #1
 80020a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	fb03 f202 	mul.w	r2, r3, r2
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	0e5b      	lsrs	r3, r3, #25
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	3301      	adds	r3, #1
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020d8:	69bb      	ldr	r3, [r7, #24]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3724      	adds	r7, #36	; 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	08003280 	.word	0x08003280
 80020f0:	00f42400 	.word	0x00f42400
 80020f4:	007a1200 	.word	0x007a1200

080020f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020fc:	4b03      	ldr	r3, [pc, #12]	; (800210c <HAL_RCC_GetHCLKFreq+0x14>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000000 	.word	0x20000000

08002110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002114:	f7ff fff0 	bl	80020f8 <HAL_RCC_GetHCLKFreq>
 8002118:	4602      	mov	r2, r0
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_RCC_GetPCLK1Freq+0x24>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	0a1b      	lsrs	r3, r3, #8
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	4904      	ldr	r1, [pc, #16]	; (8002138 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002126:	5ccb      	ldrb	r3, [r1, r3]
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	08003278 	.word	0x08003278

0800213c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002140:	f7ff ffda 	bl	80020f8 <HAL_RCC_GetHCLKFreq>
 8002144:	4602      	mov	r2, r0
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	0adb      	lsrs	r3, r3, #11
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	4904      	ldr	r1, [pc, #16]	; (8002164 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002152:	5ccb      	ldrb	r3, [r1, r3]
 8002154:	f003 031f 	and.w	r3, r3, #31
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	08003278 	.word	0x08003278

08002168 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002170:	2300      	movs	r3, #0
 8002172:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002174:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002180:	f7ff f9b6 	bl	80014f0 <HAL_PWREx_GetVoltageRange>
 8002184:	6178      	str	r0, [r7, #20]
 8002186:	e014      	b.n	80021b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002188:	4b25      	ldr	r3, [pc, #148]	; (8002220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	4a24      	ldr	r2, [pc, #144]	; (8002220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800218e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002192:	6593      	str	r3, [r2, #88]	; 0x58
 8002194:	4b22      	ldr	r3, [pc, #136]	; (8002220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021a0:	f7ff f9a6 	bl	80014f0 <HAL_PWREx_GetVoltageRange>
 80021a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021a6:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021aa:	4a1d      	ldr	r2, [pc, #116]	; (8002220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b8:	d10b      	bne.n	80021d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b80      	cmp	r3, #128	; 0x80
 80021be:	d919      	bls.n	80021f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2ba0      	cmp	r3, #160	; 0xa0
 80021c4:	d902      	bls.n	80021cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021c6:	2302      	movs	r3, #2
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	e013      	b.n	80021f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021cc:	2301      	movs	r3, #1
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	e010      	b.n	80021f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b80      	cmp	r3, #128	; 0x80
 80021d6:	d902      	bls.n	80021de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021d8:	2303      	movs	r3, #3
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	e00a      	b.n	80021f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b80      	cmp	r3, #128	; 0x80
 80021e2:	d102      	bne.n	80021ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021e4:	2302      	movs	r3, #2
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	e004      	b.n	80021f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b70      	cmp	r3, #112	; 0x70
 80021ee:	d101      	bne.n	80021f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021f0:	2301      	movs	r3, #1
 80021f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f023 0207 	bic.w	r2, r3, #7
 80021fc:	4909      	ldr	r1, [pc, #36]	; (8002224 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	429a      	cmp	r2, r3
 8002210:	d001      	beq.n	8002216 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000
 8002224:	40022000 	.word	0x40022000

08002228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002230:	2300      	movs	r3, #0
 8002232:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002234:	2300      	movs	r3, #0
 8002236:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002240:	2b00      	cmp	r3, #0
 8002242:	d031      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002248:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800224c:	d01a      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800224e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002252:	d814      	bhi.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002254:	2b00      	cmp	r3, #0
 8002256:	d009      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002258:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800225c:	d10f      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800225e:	4b5d      	ldr	r3, [pc, #372]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	4a5c      	ldr	r2, [pc, #368]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002268:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800226a:	e00c      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3304      	adds	r3, #4
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fa44 	bl	8002700 <RCCEx_PLLSAI1_Config>
 8002278:	4603      	mov	r3, r0
 800227a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800227c:	e003      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	74fb      	strb	r3, [r7, #19]
      break;
 8002282:	e000      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002286:	7cfb      	ldrb	r3, [r7, #19]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10b      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800228c:	4b51      	ldr	r3, [pc, #324]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229a:	494e      	ldr	r1, [pc, #312]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022a2:	e001      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a4:	7cfb      	ldrb	r3, [r7, #19]
 80022a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 809e 	beq.w	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022ba:	4b46      	ldr	r3, [pc, #280]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80022ca:	2300      	movs	r3, #0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00d      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d0:	4b40      	ldr	r3, [pc, #256]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d4:	4a3f      	ldr	r2, [pc, #252]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022da:	6593      	str	r3, [r2, #88]	; 0x58
 80022dc:	4b3d      	ldr	r3, [pc, #244]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e8:	2301      	movs	r3, #1
 80022ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022ec:	4b3a      	ldr	r3, [pc, #232]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a39      	ldr	r2, [pc, #228]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022f8:	f7fe fbfe 	bl	8000af8 <HAL_GetTick>
 80022fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022fe:	e009      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002300:	f7fe fbfa 	bl	8000af8 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d902      	bls.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	74fb      	strb	r3, [r7, #19]
        break;
 8002312:	e005      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002314:	4b30      	ldr	r3, [pc, #192]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0ef      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d15a      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002326:	4b2b      	ldr	r3, [pc, #172]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002330:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d01e      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	429a      	cmp	r2, r3
 8002340:	d019      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002342:	4b24      	ldr	r3, [pc, #144]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800234c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800234e:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002354:	4a1f      	ldr	r2, [pc, #124]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800235e:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002364:	4a1b      	ldr	r2, [pc, #108]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800236e:	4a19      	ldr	r2, [pc, #100]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d016      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002380:	f7fe fbba 	bl	8000af8 <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002386:	e00b      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002388:	f7fe fbb6 	bl	8000af8 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	; 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d902      	bls.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	74fb      	strb	r3, [r7, #19]
            break;
 800239e:	e006      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0ec      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80023ae:	7cfb      	ldrb	r3, [r7, #19]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10b      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023c2:	4904      	ldr	r1, [pc, #16]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023ca:	e009      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	74bb      	strb	r3, [r7, #18]
 80023d0:	e006      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023dc:	7cfb      	ldrb	r3, [r7, #19]
 80023de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023e0:	7c7b      	ldrb	r3, [r7, #17]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d105      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e6:	4b9e      	ldr	r3, [pc, #632]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ea:	4a9d      	ldr	r2, [pc, #628]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023fe:	4b98      	ldr	r3, [pc, #608]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002404:	f023 0203 	bic.w	r2, r3, #3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4994      	ldr	r1, [pc, #592]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002420:	4b8f      	ldr	r3, [pc, #572]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002426:	f023 020c 	bic.w	r2, r3, #12
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	498c      	ldr	r1, [pc, #560]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002442:	4b87      	ldr	r3, [pc, #540]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002448:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	4983      	ldr	r1, [pc, #524]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002464:	4b7e      	ldr	r3, [pc, #504]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	497b      	ldr	r1, [pc, #492]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002486:	4b76      	ldr	r3, [pc, #472]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	4972      	ldr	r1, [pc, #456]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024a8:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	496a      	ldr	r1, [pc, #424]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024ca:	4b65      	ldr	r3, [pc, #404]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d8:	4961      	ldr	r1, [pc, #388]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ec:	4b5c      	ldr	r3, [pc, #368]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fa:	4959      	ldr	r1, [pc, #356]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800250e:	4b54      	ldr	r3, [pc, #336]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251c:	4950      	ldr	r1, [pc, #320]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002530:	4b4b      	ldr	r3, [pc, #300]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253e:	4948      	ldr	r1, [pc, #288]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002552:	4b43      	ldr	r3, [pc, #268]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002554:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002558:	f023 0203 	bic.w	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	493f      	ldr	r1, [pc, #252]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d028      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002574:	4b3a      	ldr	r3, [pc, #232]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002582:	4937      	ldr	r1, [pc, #220]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800258e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002592:	d106      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002594:	4b32      	ldr	r3, [pc, #200]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4a31      	ldr	r2, [pc, #196]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800259a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800259e:	60d3      	str	r3, [r2, #12]
 80025a0:	e011      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025aa:	d10c      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3304      	adds	r3, #4
 80025b0:	2101      	movs	r1, #1
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 f8a4 	bl	8002700 <RCCEx_PLLSAI1_Config>
 80025b8:	4603      	mov	r3, r0
 80025ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80025c2:	7cfb      	ldrb	r3, [r7, #19]
 80025c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d028      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025d2:	4b23      	ldr	r3, [pc, #140]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e0:	491f      	ldr	r1, [pc, #124]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025f0:	d106      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f2:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	4a1a      	ldr	r2, [pc, #104]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025fc:	60d3      	str	r3, [r2, #12]
 80025fe:	e011      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002604:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002608:	d10c      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3304      	adds	r3, #4
 800260e:	2101      	movs	r1, #1
 8002610:	4618      	mov	r0, r3
 8002612:	f000 f875 	bl	8002700 <RCCEx_PLLSAI1_Config>
 8002616:	4603      	mov	r3, r0
 8002618:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800261a:	7cfb      	ldrb	r3, [r7, #19]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002620:	7cfb      	ldrb	r3, [r7, #19]
 8002622:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d02b      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263e:	4908      	ldr	r1, [pc, #32]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800264e:	d109      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4a02      	ldr	r2, [pc, #8]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800265a:	60d3      	str	r3, [r2, #12]
 800265c:	e014      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800266c:	d10c      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3304      	adds	r3, #4
 8002672:	2101      	movs	r1, #1
 8002674:	4618      	mov	r0, r3
 8002676:	f000 f843 	bl	8002700 <RCCEx_PLLSAI1_Config>
 800267a:	4603      	mov	r3, r0
 800267c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d01c      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002694:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a2:	4916      	ldr	r1, [pc, #88]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026b2:	d10c      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3304      	adds	r3, #4
 80026b8:	2102      	movs	r1, #2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f820 	bl	8002700 <RCCEx_PLLSAI1_Config>
 80026c0:	4603      	mov	r3, r0
 80026c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80026ca:	7cfb      	ldrb	r3, [r7, #19]
 80026cc:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026da:	4b08      	ldr	r3, [pc, #32]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80026dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e8:	4904      	ldr	r1, [pc, #16]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000

08002700 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800270e:	4b74      	ldr	r3, [pc, #464]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d018      	beq.n	800274c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800271a:	4b71      	ldr	r3, [pc, #452]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f003 0203 	and.w	r2, r3, #3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d10d      	bne.n	8002746 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
       ||
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002732:	4b6b      	ldr	r3, [pc, #428]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	091b      	lsrs	r3, r3, #4
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
       ||
 8002742:	429a      	cmp	r2, r3
 8002744:	d047      	beq.n	80027d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
 800274a:	e044      	b.n	80027d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d018      	beq.n	8002786 <RCCEx_PLLSAI1_Config+0x86>
 8002754:	2b03      	cmp	r3, #3
 8002756:	d825      	bhi.n	80027a4 <RCCEx_PLLSAI1_Config+0xa4>
 8002758:	2b01      	cmp	r3, #1
 800275a:	d002      	beq.n	8002762 <RCCEx_PLLSAI1_Config+0x62>
 800275c:	2b02      	cmp	r3, #2
 800275e:	d009      	beq.n	8002774 <RCCEx_PLLSAI1_Config+0x74>
 8002760:	e020      	b.n	80027a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002762:	4b5f      	ldr	r3, [pc, #380]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d11d      	bne.n	80027aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002772:	e01a      	b.n	80027aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002774:	4b5a      	ldr	r3, [pc, #360]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277c:	2b00      	cmp	r3, #0
 800277e:	d116      	bne.n	80027ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002784:	e013      	b.n	80027ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002786:	4b56      	ldr	r3, [pc, #344]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10f      	bne.n	80027b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002792:	4b53      	ldr	r3, [pc, #332]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d109      	bne.n	80027b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027a2:	e006      	b.n	80027b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
      break;
 80027a8:	e004      	b.n	80027b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027aa:	bf00      	nop
 80027ac:	e002      	b.n	80027b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ae:	bf00      	nop
 80027b0:	e000      	b.n	80027b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10d      	bne.n	80027d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027ba:	4b49      	ldr	r3, [pc, #292]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6819      	ldr	r1, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	430b      	orrs	r3, r1
 80027d0:	4943      	ldr	r1, [pc, #268]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d17c      	bne.n	80028d6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027dc:	4b40      	ldr	r3, [pc, #256]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a3f      	ldr	r2, [pc, #252]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e8:	f7fe f986 	bl	8000af8 <HAL_GetTick>
 80027ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027ee:	e009      	b.n	8002804 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027f0:	f7fe f982 	bl	8000af8 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d902      	bls.n	8002804 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	73fb      	strb	r3, [r7, #15]
        break;
 8002802:	e005      	b.n	8002810 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002804:	4b36      	ldr	r3, [pc, #216]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1ef      	bne.n	80027f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d15f      	bne.n	80028d6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d110      	bne.n	800283e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800281c:	4b30      	ldr	r3, [pc, #192]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002824:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6892      	ldr	r2, [r2, #8]
 800282c:	0211      	lsls	r1, r2, #8
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68d2      	ldr	r2, [r2, #12]
 8002832:	06d2      	lsls	r2, r2, #27
 8002834:	430a      	orrs	r2, r1
 8002836:	492a      	ldr	r1, [pc, #168]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002838:	4313      	orrs	r3, r2
 800283a:	610b      	str	r3, [r1, #16]
 800283c:	e027      	b.n	800288e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d112      	bne.n	800286a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002844:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800284c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6892      	ldr	r2, [r2, #8]
 8002854:	0211      	lsls	r1, r2, #8
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6912      	ldr	r2, [r2, #16]
 800285a:	0852      	lsrs	r2, r2, #1
 800285c:	3a01      	subs	r2, #1
 800285e:	0552      	lsls	r2, r2, #21
 8002860:	430a      	orrs	r2, r1
 8002862:	491f      	ldr	r1, [pc, #124]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002864:	4313      	orrs	r3, r2
 8002866:	610b      	str	r3, [r1, #16]
 8002868:	e011      	b.n	800288e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800286a:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002872:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6892      	ldr	r2, [r2, #8]
 800287a:	0211      	lsls	r1, r2, #8
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6952      	ldr	r2, [r2, #20]
 8002880:	0852      	lsrs	r2, r2, #1
 8002882:	3a01      	subs	r2, #1
 8002884:	0652      	lsls	r2, r2, #25
 8002886:	430a      	orrs	r2, r1
 8002888:	4915      	ldr	r1, [pc, #84]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800288a:	4313      	orrs	r3, r2
 800288c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a13      	ldr	r2, [pc, #76]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002894:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002898:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289a:	f7fe f92d 	bl	8000af8 <HAL_GetTick>
 800289e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028a0:	e009      	b.n	80028b6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028a2:	f7fe f929 	bl	8000af8 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d902      	bls.n	80028b6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	73fb      	strb	r3, [r7, #15]
          break;
 80028b4:	e005      	b.n	80028c2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0ef      	beq.n	80028a2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d106      	bne.n	80028d6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	4903      	ldr	r1, [pc, #12]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000

080028e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e040      	b.n	8002978 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fd ffc4 	bl	8000894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2224      	movs	r2, #36	; 0x24
 8002910:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0201 	bic.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f82c 	bl	8002980 <UART_SetConfig>
 8002928:	4603      	mov	r3, r0
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e022      	b.n	8002978 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 faa6 	bl	8002e8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800294e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800295e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fb2d 	bl	8002fd0 <UART_CheckIdleState>
 8002976:	4603      	mov	r3, r0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002984:	b08a      	sub	sp, #40	; 0x28
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	431a      	orrs	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	431a      	orrs	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4ba5      	ldr	r3, [pc, #660]	; (8002c44 <UART_SetConfig+0x2c4>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029b8:	430b      	orrs	r3, r1
 80029ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a9a      	ldr	r2, [pc, #616]	; (8002c48 <UART_SetConfig+0x2c8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d004      	beq.n	80029ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e8:	4313      	orrs	r3, r2
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fc:	430a      	orrs	r2, r1
 80029fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a91      	ldr	r2, [pc, #580]	; (8002c4c <UART_SetConfig+0x2cc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d126      	bne.n	8002a58 <UART_SetConfig+0xd8>
 8002a0a:	4b91      	ldr	r3, [pc, #580]	; (8002c50 <UART_SetConfig+0x2d0>)
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d81b      	bhi.n	8002a50 <UART_SetConfig+0xd0>
 8002a18:	a201      	add	r2, pc, #4	; (adr r2, 8002a20 <UART_SetConfig+0xa0>)
 8002a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1e:	bf00      	nop
 8002a20:	08002a31 	.word	0x08002a31
 8002a24:	08002a41 	.word	0x08002a41
 8002a28:	08002a39 	.word	0x08002a39
 8002a2c:	08002a49 	.word	0x08002a49
 8002a30:	2301      	movs	r3, #1
 8002a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a36:	e0d6      	b.n	8002be6 <UART_SetConfig+0x266>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a3e:	e0d2      	b.n	8002be6 <UART_SetConfig+0x266>
 8002a40:	2304      	movs	r3, #4
 8002a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a46:	e0ce      	b.n	8002be6 <UART_SetConfig+0x266>
 8002a48:	2308      	movs	r3, #8
 8002a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a4e:	e0ca      	b.n	8002be6 <UART_SetConfig+0x266>
 8002a50:	2310      	movs	r3, #16
 8002a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a56:	e0c6      	b.n	8002be6 <UART_SetConfig+0x266>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a7d      	ldr	r2, [pc, #500]	; (8002c54 <UART_SetConfig+0x2d4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d138      	bne.n	8002ad4 <UART_SetConfig+0x154>
 8002a62:	4b7b      	ldr	r3, [pc, #492]	; (8002c50 <UART_SetConfig+0x2d0>)
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b0c      	cmp	r3, #12
 8002a6e:	d82d      	bhi.n	8002acc <UART_SetConfig+0x14c>
 8002a70:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <UART_SetConfig+0xf8>)
 8002a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a76:	bf00      	nop
 8002a78:	08002aad 	.word	0x08002aad
 8002a7c:	08002acd 	.word	0x08002acd
 8002a80:	08002acd 	.word	0x08002acd
 8002a84:	08002acd 	.word	0x08002acd
 8002a88:	08002abd 	.word	0x08002abd
 8002a8c:	08002acd 	.word	0x08002acd
 8002a90:	08002acd 	.word	0x08002acd
 8002a94:	08002acd 	.word	0x08002acd
 8002a98:	08002ab5 	.word	0x08002ab5
 8002a9c:	08002acd 	.word	0x08002acd
 8002aa0:	08002acd 	.word	0x08002acd
 8002aa4:	08002acd 	.word	0x08002acd
 8002aa8:	08002ac5 	.word	0x08002ac5
 8002aac:	2300      	movs	r3, #0
 8002aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ab2:	e098      	b.n	8002be6 <UART_SetConfig+0x266>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aba:	e094      	b.n	8002be6 <UART_SetConfig+0x266>
 8002abc:	2304      	movs	r3, #4
 8002abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ac2:	e090      	b.n	8002be6 <UART_SetConfig+0x266>
 8002ac4:	2308      	movs	r3, #8
 8002ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aca:	e08c      	b.n	8002be6 <UART_SetConfig+0x266>
 8002acc:	2310      	movs	r3, #16
 8002ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ad2:	e088      	b.n	8002be6 <UART_SetConfig+0x266>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a5f      	ldr	r2, [pc, #380]	; (8002c58 <UART_SetConfig+0x2d8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d125      	bne.n	8002b2a <UART_SetConfig+0x1aa>
 8002ade:	4b5c      	ldr	r3, [pc, #368]	; (8002c50 <UART_SetConfig+0x2d0>)
 8002ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ae8:	2b30      	cmp	r3, #48	; 0x30
 8002aea:	d016      	beq.n	8002b1a <UART_SetConfig+0x19a>
 8002aec:	2b30      	cmp	r3, #48	; 0x30
 8002aee:	d818      	bhi.n	8002b22 <UART_SetConfig+0x1a2>
 8002af0:	2b20      	cmp	r3, #32
 8002af2:	d00a      	beq.n	8002b0a <UART_SetConfig+0x18a>
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d814      	bhi.n	8002b22 <UART_SetConfig+0x1a2>
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <UART_SetConfig+0x182>
 8002afc:	2b10      	cmp	r3, #16
 8002afe:	d008      	beq.n	8002b12 <UART_SetConfig+0x192>
 8002b00:	e00f      	b.n	8002b22 <UART_SetConfig+0x1a2>
 8002b02:	2300      	movs	r3, #0
 8002b04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b08:	e06d      	b.n	8002be6 <UART_SetConfig+0x266>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b10:	e069      	b.n	8002be6 <UART_SetConfig+0x266>
 8002b12:	2304      	movs	r3, #4
 8002b14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b18:	e065      	b.n	8002be6 <UART_SetConfig+0x266>
 8002b1a:	2308      	movs	r3, #8
 8002b1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b20:	e061      	b.n	8002be6 <UART_SetConfig+0x266>
 8002b22:	2310      	movs	r3, #16
 8002b24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b28:	e05d      	b.n	8002be6 <UART_SetConfig+0x266>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a4b      	ldr	r2, [pc, #300]	; (8002c5c <UART_SetConfig+0x2dc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d125      	bne.n	8002b80 <UART_SetConfig+0x200>
 8002b34:	4b46      	ldr	r3, [pc, #280]	; (8002c50 <UART_SetConfig+0x2d0>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b3e:	2bc0      	cmp	r3, #192	; 0xc0
 8002b40:	d016      	beq.n	8002b70 <UART_SetConfig+0x1f0>
 8002b42:	2bc0      	cmp	r3, #192	; 0xc0
 8002b44:	d818      	bhi.n	8002b78 <UART_SetConfig+0x1f8>
 8002b46:	2b80      	cmp	r3, #128	; 0x80
 8002b48:	d00a      	beq.n	8002b60 <UART_SetConfig+0x1e0>
 8002b4a:	2b80      	cmp	r3, #128	; 0x80
 8002b4c:	d814      	bhi.n	8002b78 <UART_SetConfig+0x1f8>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <UART_SetConfig+0x1d8>
 8002b52:	2b40      	cmp	r3, #64	; 0x40
 8002b54:	d008      	beq.n	8002b68 <UART_SetConfig+0x1e8>
 8002b56:	e00f      	b.n	8002b78 <UART_SetConfig+0x1f8>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b5e:	e042      	b.n	8002be6 <UART_SetConfig+0x266>
 8002b60:	2302      	movs	r3, #2
 8002b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b66:	e03e      	b.n	8002be6 <UART_SetConfig+0x266>
 8002b68:	2304      	movs	r3, #4
 8002b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b6e:	e03a      	b.n	8002be6 <UART_SetConfig+0x266>
 8002b70:	2308      	movs	r3, #8
 8002b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b76:	e036      	b.n	8002be6 <UART_SetConfig+0x266>
 8002b78:	2310      	movs	r3, #16
 8002b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b7e:	e032      	b.n	8002be6 <UART_SetConfig+0x266>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a30      	ldr	r2, [pc, #192]	; (8002c48 <UART_SetConfig+0x2c8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d12a      	bne.n	8002be0 <UART_SetConfig+0x260>
 8002b8a:	4b31      	ldr	r3, [pc, #196]	; (8002c50 <UART_SetConfig+0x2d0>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b98:	d01a      	beq.n	8002bd0 <UART_SetConfig+0x250>
 8002b9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b9e:	d81b      	bhi.n	8002bd8 <UART_SetConfig+0x258>
 8002ba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ba4:	d00c      	beq.n	8002bc0 <UART_SetConfig+0x240>
 8002ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002baa:	d815      	bhi.n	8002bd8 <UART_SetConfig+0x258>
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <UART_SetConfig+0x238>
 8002bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb4:	d008      	beq.n	8002bc8 <UART_SetConfig+0x248>
 8002bb6:	e00f      	b.n	8002bd8 <UART_SetConfig+0x258>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bbe:	e012      	b.n	8002be6 <UART_SetConfig+0x266>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bc6:	e00e      	b.n	8002be6 <UART_SetConfig+0x266>
 8002bc8:	2304      	movs	r3, #4
 8002bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bce:	e00a      	b.n	8002be6 <UART_SetConfig+0x266>
 8002bd0:	2308      	movs	r3, #8
 8002bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bd6:	e006      	b.n	8002be6 <UART_SetConfig+0x266>
 8002bd8:	2310      	movs	r3, #16
 8002bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bde:	e002      	b.n	8002be6 <UART_SetConfig+0x266>
 8002be0:	2310      	movs	r3, #16
 8002be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a17      	ldr	r2, [pc, #92]	; (8002c48 <UART_SetConfig+0x2c8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	f040 808b 	bne.w	8002d08 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bf2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d834      	bhi.n	8002c64 <UART_SetConfig+0x2e4>
 8002bfa:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <UART_SetConfig+0x280>)
 8002bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c00:	08002c25 	.word	0x08002c25
 8002c04:	08002c65 	.word	0x08002c65
 8002c08:	08002c2d 	.word	0x08002c2d
 8002c0c:	08002c65 	.word	0x08002c65
 8002c10:	08002c33 	.word	0x08002c33
 8002c14:	08002c65 	.word	0x08002c65
 8002c18:	08002c65 	.word	0x08002c65
 8002c1c:	08002c65 	.word	0x08002c65
 8002c20:	08002c3b 	.word	0x08002c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c24:	f7ff fa74 	bl	8002110 <HAL_RCC_GetPCLK1Freq>
 8002c28:	61f8      	str	r0, [r7, #28]
        break;
 8002c2a:	e021      	b.n	8002c70 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <UART_SetConfig+0x2e0>)
 8002c2e:	61fb      	str	r3, [r7, #28]
        break;
 8002c30:	e01e      	b.n	8002c70 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c32:	f7ff f9d5 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8002c36:	61f8      	str	r0, [r7, #28]
        break;
 8002c38:	e01a      	b.n	8002c70 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c3e:	61fb      	str	r3, [r7, #28]
        break;
 8002c40:	e016      	b.n	8002c70 <UART_SetConfig+0x2f0>
 8002c42:	bf00      	nop
 8002c44:	efff69f3 	.word	0xefff69f3
 8002c48:	40008000 	.word	0x40008000
 8002c4c:	40013800 	.word	0x40013800
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40004400 	.word	0x40004400
 8002c58:	40004800 	.word	0x40004800
 8002c5c:	40004c00 	.word	0x40004c00
 8002c60:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002c6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 80fa 	beq.w	8002e6c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4413      	add	r3, r2
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d305      	bcc.n	8002c94 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d903      	bls.n	8002c9c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002c9a:	e0e7      	b.n	8002e6c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	461c      	mov	r4, r3
 8002ca2:	4615      	mov	r5, r2
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	022b      	lsls	r3, r5, #8
 8002cae:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002cb2:	0222      	lsls	r2, r4, #8
 8002cb4:	68f9      	ldr	r1, [r7, #12]
 8002cb6:	6849      	ldr	r1, [r1, #4]
 8002cb8:	0849      	lsrs	r1, r1, #1
 8002cba:	2000      	movs	r0, #0
 8002cbc:	4688      	mov	r8, r1
 8002cbe:	4681      	mov	r9, r0
 8002cc0:	eb12 0a08 	adds.w	sl, r2, r8
 8002cc4:	eb43 0b09 	adc.w	fp, r3, r9
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cd6:	4650      	mov	r0, sl
 8002cd8:	4659      	mov	r1, fp
 8002cda:	f7fd fa7b 	bl	80001d4 <__aeabi_uldivmod>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cec:	d308      	bcc.n	8002d00 <UART_SetConfig+0x380>
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cf4:	d204      	bcs.n	8002d00 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	e0b5      	b.n	8002e6c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002d06:	e0b1      	b.n	8002e6c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d10:	d15d      	bne.n	8002dce <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8002d12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d827      	bhi.n	8002d6a <UART_SetConfig+0x3ea>
 8002d1a:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <UART_SetConfig+0x3a0>)
 8002d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d20:	08002d45 	.word	0x08002d45
 8002d24:	08002d4d 	.word	0x08002d4d
 8002d28:	08002d55 	.word	0x08002d55
 8002d2c:	08002d6b 	.word	0x08002d6b
 8002d30:	08002d5b 	.word	0x08002d5b
 8002d34:	08002d6b 	.word	0x08002d6b
 8002d38:	08002d6b 	.word	0x08002d6b
 8002d3c:	08002d6b 	.word	0x08002d6b
 8002d40:	08002d63 	.word	0x08002d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d44:	f7ff f9e4 	bl	8002110 <HAL_RCC_GetPCLK1Freq>
 8002d48:	61f8      	str	r0, [r7, #28]
        break;
 8002d4a:	e014      	b.n	8002d76 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d4c:	f7ff f9f6 	bl	800213c <HAL_RCC_GetPCLK2Freq>
 8002d50:	61f8      	str	r0, [r7, #28]
        break;
 8002d52:	e010      	b.n	8002d76 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d54:	4b4c      	ldr	r3, [pc, #304]	; (8002e88 <UART_SetConfig+0x508>)
 8002d56:	61fb      	str	r3, [r7, #28]
        break;
 8002d58:	e00d      	b.n	8002d76 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d5a:	f7ff f941 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8002d5e:	61f8      	str	r0, [r7, #28]
        break;
 8002d60:	e009      	b.n	8002d76 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d66:	61fb      	str	r3, [r7, #28]
        break;
 8002d68:	e005      	b.n	8002d76 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002d74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d077      	beq.n	8002e6c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005a      	lsls	r2, r3, #1
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	085b      	lsrs	r3, r3, #1
 8002d86:	441a      	add	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	2b0f      	cmp	r3, #15
 8002d96:	d916      	bls.n	8002dc6 <UART_SetConfig+0x446>
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9e:	d212      	bcs.n	8002dc6 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f023 030f 	bic.w	r3, r3, #15
 8002da8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	085b      	lsrs	r3, r3, #1
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	8afb      	ldrh	r3, [r7, #22]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	8afa      	ldrh	r2, [r7, #22]
 8002dc2:	60da      	str	r2, [r3, #12]
 8002dc4:	e052      	b.n	8002e6c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002dcc:	e04e      	b.n	8002e6c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d827      	bhi.n	8002e26 <UART_SetConfig+0x4a6>
 8002dd6:	a201      	add	r2, pc, #4	; (adr r2, 8002ddc <UART_SetConfig+0x45c>)
 8002dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ddc:	08002e01 	.word	0x08002e01
 8002de0:	08002e09 	.word	0x08002e09
 8002de4:	08002e11 	.word	0x08002e11
 8002de8:	08002e27 	.word	0x08002e27
 8002dec:	08002e17 	.word	0x08002e17
 8002df0:	08002e27 	.word	0x08002e27
 8002df4:	08002e27 	.word	0x08002e27
 8002df8:	08002e27 	.word	0x08002e27
 8002dfc:	08002e1f 	.word	0x08002e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e00:	f7ff f986 	bl	8002110 <HAL_RCC_GetPCLK1Freq>
 8002e04:	61f8      	str	r0, [r7, #28]
        break;
 8002e06:	e014      	b.n	8002e32 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e08:	f7ff f998 	bl	800213c <HAL_RCC_GetPCLK2Freq>
 8002e0c:	61f8      	str	r0, [r7, #28]
        break;
 8002e0e:	e010      	b.n	8002e32 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <UART_SetConfig+0x508>)
 8002e12:	61fb      	str	r3, [r7, #28]
        break;
 8002e14:	e00d      	b.n	8002e32 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e16:	f7ff f8e3 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8002e1a:	61f8      	str	r0, [r7, #28]
        break;
 8002e1c:	e009      	b.n	8002e32 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e22:	61fb      	str	r3, [r7, #28]
        break;
 8002e24:	e005      	b.n	8002e32 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e30:	bf00      	nop
    }

    if (pclk != 0U)
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d019      	beq.n	8002e6c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	085a      	lsrs	r2, r3, #1
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	441a      	add	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	2b0f      	cmp	r3, #15
 8002e50:	d909      	bls.n	8002e66 <UART_SetConfig+0x4e6>
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e58:	d205      	bcs.n	8002e66 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60da      	str	r2, [r3, #12]
 8002e64:	e002      	b.n	8002e6c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3728      	adds	r7, #40	; 0x28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e86:	bf00      	nop
 8002e88:	00f42400 	.word	0x00f42400

08002e8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00a      	beq.n	8002eb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d01a      	beq.n	8002fa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f8a:	d10a      	bne.n	8002fa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	605a      	str	r2, [r3, #4]
  }
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fe0:	f7fd fd8a 	bl	8000af8 <HAL_GetTick>
 8002fe4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d10e      	bne.n	8003012 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ff4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f82d 	bl	8003062 <UART_WaitOnFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e023      	b.n	800305a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b04      	cmp	r3, #4
 800301e:	d10e      	bne.n	800303e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003020:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f817 	bl	8003062 <UART_WaitOnFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e00d      	b.n	800305a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2220      	movs	r2, #32
 8003042:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b09c      	sub	sp, #112	; 0x70
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	603b      	str	r3, [r7, #0]
 800306e:	4613      	mov	r3, r2
 8003070:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003072:	e0a5      	b.n	80031c0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307a:	f000 80a1 	beq.w	80031c0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307e:	f7fd fd3b 	bl	8000af8 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800308a:	429a      	cmp	r2, r3
 800308c:	d302      	bcc.n	8003094 <UART_WaitOnFlagUntilTimeout+0x32>
 800308e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003090:	2b00      	cmp	r3, #0
 8003092:	d13e      	bne.n	8003112 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800309c:	e853 3f00 	ldrex	r3, [r3]
 80030a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80030a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030a8:	667b      	str	r3, [r7, #100]	; 0x64
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80030b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030ba:	e841 2300 	strex	r3, r2, [r1]
 80030be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80030c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1e6      	bne.n	8003094 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3308      	adds	r3, #8
 80030cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030d0:	e853 3f00 	ldrex	r3, [r3]
 80030d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d8:	f023 0301 	bic.w	r3, r3, #1
 80030dc:	663b      	str	r3, [r7, #96]	; 0x60
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3308      	adds	r3, #8
 80030e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80030e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80030ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030ee:	e841 2300 	strex	r3, r2, [r1]
 80030f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80030f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1e5      	bne.n	80030c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e067      	b.n	80031e2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d04f      	beq.n	80031c0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800312a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800312e:	d147      	bne.n	80031c0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003138:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003142:	e853 3f00 	ldrex	r3, [r3]
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800314e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003158:	637b      	str	r3, [r7, #52]	; 0x34
 800315a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800315e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003160:	e841 2300 	strex	r3, r2, [r1]
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1e6      	bne.n	800313a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3308      	adds	r3, #8
 8003172:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	e853 3f00 	ldrex	r3, [r3]
 800317a:	613b      	str	r3, [r7, #16]
   return(result);
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	66bb      	str	r3, [r7, #104]	; 0x68
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	3308      	adds	r3, #8
 800318a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800318c:	623a      	str	r2, [r7, #32]
 800318e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003190:	69f9      	ldr	r1, [r7, #28]
 8003192:	6a3a      	ldr	r2, [r7, #32]
 8003194:	e841 2300 	strex	r3, r2, [r1]
 8003198:	61bb      	str	r3, [r7, #24]
   return(result);
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1e5      	bne.n	800316c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e010      	b.n	80031e2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69da      	ldr	r2, [r3, #28]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	4013      	ands	r3, r2
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	bf0c      	ite	eq
 80031d0:	2301      	moveq	r3, #1
 80031d2:	2300      	movne	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	429a      	cmp	r2, r3
 80031dc:	f43f af4a 	beq.w	8003074 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3770      	adds	r7, #112	; 0x70
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <__libc_init_array>:
 80031ec:	b570      	push	{r4, r5, r6, lr}
 80031ee:	4d0d      	ldr	r5, [pc, #52]	; (8003224 <__libc_init_array+0x38>)
 80031f0:	4c0d      	ldr	r4, [pc, #52]	; (8003228 <__libc_init_array+0x3c>)
 80031f2:	1b64      	subs	r4, r4, r5
 80031f4:	10a4      	asrs	r4, r4, #2
 80031f6:	2600      	movs	r6, #0
 80031f8:	42a6      	cmp	r6, r4
 80031fa:	d109      	bne.n	8003210 <__libc_init_array+0x24>
 80031fc:	4d0b      	ldr	r5, [pc, #44]	; (800322c <__libc_init_array+0x40>)
 80031fe:	4c0c      	ldr	r4, [pc, #48]	; (8003230 <__libc_init_array+0x44>)
 8003200:	f000 f820 	bl	8003244 <_init>
 8003204:	1b64      	subs	r4, r4, r5
 8003206:	10a4      	asrs	r4, r4, #2
 8003208:	2600      	movs	r6, #0
 800320a:	42a6      	cmp	r6, r4
 800320c:	d105      	bne.n	800321a <__libc_init_array+0x2e>
 800320e:	bd70      	pop	{r4, r5, r6, pc}
 8003210:	f855 3b04 	ldr.w	r3, [r5], #4
 8003214:	4798      	blx	r3
 8003216:	3601      	adds	r6, #1
 8003218:	e7ee      	b.n	80031f8 <__libc_init_array+0xc>
 800321a:	f855 3b04 	ldr.w	r3, [r5], #4
 800321e:	4798      	blx	r3
 8003220:	3601      	adds	r6, #1
 8003222:	e7f2      	b.n	800320a <__libc_init_array+0x1e>
 8003224:	080032b8 	.word	0x080032b8
 8003228:	080032b8 	.word	0x080032b8
 800322c:	080032b8 	.word	0x080032b8
 8003230:	080032bc 	.word	0x080032bc

08003234 <memset>:
 8003234:	4402      	add	r2, r0
 8003236:	4603      	mov	r3, r0
 8003238:	4293      	cmp	r3, r2
 800323a:	d100      	bne.n	800323e <memset+0xa>
 800323c:	4770      	bx	lr
 800323e:	f803 1b01 	strb.w	r1, [r3], #1
 8003242:	e7f9      	b.n	8003238 <memset+0x4>

08003244 <_init>:
 8003244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003246:	bf00      	nop
 8003248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324a:	bc08      	pop	{r3}
 800324c:	469e      	mov	lr, r3
 800324e:	4770      	bx	lr

08003250 <_fini>:
 8003250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003252:	bf00      	nop
 8003254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003256:	bc08      	pop	{r3}
 8003258:	469e      	mov	lr, r3
 800325a:	4770      	bx	lr
